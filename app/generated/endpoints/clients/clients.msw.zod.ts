/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * oauthabl API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { Client, Clients } from "../oauthablAPI.schemas";

export const getGetClientsClientIdResponseMock = (
  overrideResponse: Partial<Client> = {}
): Client => ({
  accessTokenValidity: faker.helpers.arrayElement([
    faker.number.int({ min: 60, max: undefined }),
    undefined,
  ]),
  disableRefreshToken: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  id: faker.string.alpha(20),
  name: faker.string.alpha(20),
  redirectUris: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.internet.url()),
  refreshRefreshToken: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  refreshTokenValidity: faker.helpers.arrayElement([
    faker.number.int({ min: 60, max: undefined }),
    undefined,
  ]),
  secret: faker.string.alpha(20),
  ...overrideResponse,
});

export const getPatchClientsClientIdResponseMock = (
  overrideResponse: Partial<Client> = {}
): Client => ({
  accessTokenValidity: faker.helpers.arrayElement([
    faker.number.int({ min: 60, max: undefined }),
    undefined,
  ]),
  disableRefreshToken: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  id: faker.string.alpha(20),
  name: faker.string.alpha(20),
  redirectUris: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.internet.url()),
  refreshRefreshToken: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  refreshTokenValidity: faker.helpers.arrayElement([
    faker.number.int({ min: 60, max: undefined }),
    undefined,
  ]),
  secret: faker.string.alpha(20),
  ...overrideResponse,
});

export const getPostClientsResponseMock = (
  overrideResponse: Partial<Client> = {}
): Client => ({
  accessTokenValidity: faker.helpers.arrayElement([
    faker.number.int({ min: 60, max: undefined }),
    undefined,
  ]),
  disableRefreshToken: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  id: faker.string.alpha(20),
  name: faker.string.alpha(20),
  redirectUris: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.internet.url()),
  refreshRefreshToken: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  refreshTokenValidity: faker.helpers.arrayElement([
    faker.number.int({ min: 60, max: undefined }),
    undefined,
  ]),
  secret: faker.string.alpha(20),
  ...overrideResponse,
});

export const getGetClientsResponseMock = (): Clients =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.string.alpha(20),
    name: faker.string.alpha(20),
    secret: faker.string.alpha(20),
  }));

export const getGetClientsClientIdMockHandler = (
  overrideResponse?:
    | Client
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Client> | Client)
) => {
  return http.get("*/clients/:clientId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetClientsClientIdResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getPatchClientsClientIdMockHandler = (
  overrideResponse?:
    | Client
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<Client> | Client)
) => {
  return http.patch("*/clients/:clientId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchClientsClientIdResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getDeleteClientsClientIdMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete("*/clients/:clientId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostClientsMockHandler = (
  overrideResponse?:
    | Client
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<Client> | Client)
) => {
  return http.post("*/clients", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostClientsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getGetClientsMockHandler = (
  overrideResponse?:
    | Clients
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Clients> | Clients)
) => {
  return http.get("*/clients", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetClientsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};
export const getClientsMock = () => [
  getGetClientsClientIdMockHandler(),
  getPatchClientsClientIdMockHandler(),
  getDeleteClientsClientIdMockHandler(),
  getPostClientsMockHandler(),
  getGetClientsMockHandler(),
];
