/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * oauthabl API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  DeleteOauthOauthSessions401,
  DeleteOauthOauthSessions500,
  DeleteOauthOauthSessionsSessionId401,
  DeleteOauthOauthSessionsSessionId500,
  Error,
  GetOauthOauthSessions401,
  GetOauthOauthSessions500,
  GetOauthOauthValidate401,
  GetOauthOauthValidate500,
  PostOauthOauthLogout500,
  PostOauthOauthRefresh401,
  PostOauthOauthRefresh500,
  PostOauthOauthToken401,
  PostOauthOauthToken500,
  Sessions,
  TokenRequest,
} from "../../models";

export const postOauthOauthToken = (
  tokenRequest: TokenRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/token`,
    tokenRequest,
    options
  );
};

export const getPostOauthOauthTokenMutationOptions = <
  TError = AxiosError<PostOauthOauthToken401 | PostOauthOauthToken500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOauthOauthToken>>,
    TError,
    { data: TokenRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOauthOauthToken>>,
  TError,
  { data: TokenRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOauthOauthToken>>,
    { data: TokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postOauthOauthToken(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOauthOauthTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOauthOauthToken>>
>;
export type PostOauthOauthTokenMutationBody = TokenRequest;
export type PostOauthOauthTokenMutationError = AxiosError<
  PostOauthOauthToken401 | PostOauthOauthToken500
>;

export const usePostOauthOauthToken = <
  TError = AxiosError<PostOauthOauthToken401 | PostOauthOauthToken500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOauthOauthToken>>,
    TError,
    { data: TokenRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postOauthOauthToken>>,
  TError,
  { data: TokenRequest },
  TContext
> => {
  const mutationOptions = getPostOauthOauthTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postOauthOauthRefresh = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/refresh`,
    undefined,
    options
  );
};

export const getPostOauthOauthRefreshMutationOptions = <
  TError = AxiosError<PostOauthOauthRefresh401 | PostOauthOauthRefresh500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOauthOauthRefresh>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOauthOauthRefresh>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOauthOauthRefresh>>,
    void
  > = () => {
    return postOauthOauthRefresh(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOauthOauthRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOauthOauthRefresh>>
>;

export type PostOauthOauthRefreshMutationError = AxiosError<
  PostOauthOauthRefresh401 | PostOauthOauthRefresh500
>;

export const usePostOauthOauthRefresh = <
  TError = AxiosError<PostOauthOauthRefresh401 | PostOauthOauthRefresh500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOauthOauthRefresh>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postOauthOauthRefresh>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostOauthOauthRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postOauthOauthLogout = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/logout`,
    undefined,
    options
  );
};

export const getPostOauthOauthLogoutMutationOptions = <
  TError = AxiosError<PostOauthOauthLogout500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOauthOauthLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOauthOauthLogout>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOauthOauthLogout>>,
    void
  > = () => {
    return postOauthOauthLogout(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOauthOauthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOauthOauthLogout>>
>;

export type PostOauthOauthLogoutMutationError =
  AxiosError<PostOauthOauthLogout500>;

export const usePostOauthOauthLogout = <
  TError = AxiosError<PostOauthOauthLogout500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOauthOauthLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postOauthOauthLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostOauthOauthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getOauthOauthValidate = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/validate`,
    options
  );
};

export const getGetOauthOauthValidateQueryKey = () => {
  return [
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/validate`,
  ] as const;
};

export const getGetOauthOauthValidateQueryOptions = <
  TData = Awaited<ReturnType<typeof getOauthOauthValidate>>,
  TError = AxiosError<GetOauthOauthValidate401 | GetOauthOauthValidate500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthValidate>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOauthOauthValidateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOauthOauthValidate>>
  > = ({ signal }) => getOauthOauthValidate({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOauthOauthValidate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetOauthOauthValidateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOauthOauthValidate>>
>;
export type GetOauthOauthValidateQueryError = AxiosError<
  GetOauthOauthValidate401 | GetOauthOauthValidate500
>;

export function useGetOauthOauthValidate<
  TData = Awaited<ReturnType<typeof getOauthOauthValidate>>,
  TError = AxiosError<GetOauthOauthValidate401 | GetOauthOauthValidate500>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthValidate>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getOauthOauthValidate>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetOauthOauthValidate<
  TData = Awaited<ReturnType<typeof getOauthOauthValidate>>,
  TError = AxiosError<GetOauthOauthValidate401 | GetOauthOauthValidate500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthValidate>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getOauthOauthValidate>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetOauthOauthValidate<
  TData = Awaited<ReturnType<typeof getOauthOauthValidate>>,
  TError = AxiosError<GetOauthOauthValidate401 | GetOauthOauthValidate500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthValidate>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetOauthOauthValidate<
  TData = Awaited<ReturnType<typeof getOauthOauthValidate>>,
  TError = AxiosError<GetOauthOauthValidate401 | GetOauthOauthValidate500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthValidate>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetOauthOauthValidateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getOauthOauthSessions = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Sessions>> => {
  return axios.get(
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/sessions`,
    options
  );
};

export const getGetOauthOauthSessionsQueryKey = () => {
  return [
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/sessions`,
  ] as const;
};

export const getGetOauthOauthSessionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOauthOauthSessions>>,
  TError = AxiosError<GetOauthOauthSessions401 | GetOauthOauthSessions500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthSessions>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOauthOauthSessionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOauthOauthSessions>>
  > = ({ signal }) => getOauthOauthSessions({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOauthOauthSessions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetOauthOauthSessionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOauthOauthSessions>>
>;
export type GetOauthOauthSessionsQueryError = AxiosError<
  GetOauthOauthSessions401 | GetOauthOauthSessions500
>;

export function useGetOauthOauthSessions<
  TData = Awaited<ReturnType<typeof getOauthOauthSessions>>,
  TError = AxiosError<GetOauthOauthSessions401 | GetOauthOauthSessions500>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthSessions>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getOauthOauthSessions>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetOauthOauthSessions<
  TData = Awaited<ReturnType<typeof getOauthOauthSessions>>,
  TError = AxiosError<GetOauthOauthSessions401 | GetOauthOauthSessions500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthSessions>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getOauthOauthSessions>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetOauthOauthSessions<
  TData = Awaited<ReturnType<typeof getOauthOauthSessions>>,
  TError = AxiosError<GetOauthOauthSessions401 | GetOauthOauthSessions500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthSessions>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetOauthOauthSessions<
  TData = Awaited<ReturnType<typeof getOauthOauthSessions>>,
  TError = AxiosError<GetOauthOauthSessions401 | GetOauthOauthSessions500>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getOauthOauthSessions>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetOauthOauthSessionsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteOauthOauthSessions = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/sessions`,
    options
  );
};

export const getDeleteOauthOauthSessionsMutationOptions = <
  TError = AxiosError<
    DeleteOauthOauthSessions401 | DeleteOauthOauthSessions500
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOauthOauthSessions>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOauthOauthSessions>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOauthOauthSessions>>,
    void
  > = () => {
    return deleteOauthOauthSessions(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOauthOauthSessionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOauthOauthSessions>>
>;

export type DeleteOauthOauthSessionsMutationError = AxiosError<
  DeleteOauthOauthSessions401 | DeleteOauthOauthSessions500
>;

export const useDeleteOauthOauthSessions = <
  TError = AxiosError<
    DeleteOauthOauthSessions401 | DeleteOauthOauthSessions500
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOauthOauthSessions>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteOauthOauthSessions>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDeleteOauthOauthSessionsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteOauthOauthSessionsSessionId = (
  sessionId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(
    `https://hono-oath2-admin-api.david-e-rhoderick.workers.dev/oauth/oauth/sessions/${sessionId}`,
    options
  );
};

export const getDeleteOauthOauthSessionsSessionIdMutationOptions = <
  TError = AxiosError<
    | DeleteOauthOauthSessionsSessionId401
    | Error
    | DeleteOauthOauthSessionsSessionId500
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOauthOauthSessionsSessionId>>,
    TError,
    { sessionId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOauthOauthSessionsSessionId>>,
  TError,
  { sessionId: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOauthOauthSessionsSessionId>>,
    { sessionId: string }
  > = (props) => {
    const { sessionId } = props ?? {};

    return deleteOauthOauthSessionsSessionId(sessionId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOauthOauthSessionsSessionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOauthOauthSessionsSessionId>>
>;

export type DeleteOauthOauthSessionsSessionIdMutationError = AxiosError<
  | DeleteOauthOauthSessionsSessionId401
  | Error
  | DeleteOauthOauthSessionsSessionId500
>;

export const useDeleteOauthOauthSessionsSessionId = <
  TError = AxiosError<
    | DeleteOauthOauthSessionsSessionId401
    | Error
    | DeleteOauthOauthSessionsSessionId500
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOauthOauthSessionsSessionId>>,
    TError,
    { sessionId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteOauthOauthSessionsSessionId>>,
  TError,
  { sessionId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteOauthOauthSessionsSessionIdMutationOptions(options);

  return useMutation(mutationOptions);
};
