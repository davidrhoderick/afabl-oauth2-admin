/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * oauthabl API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { Sessions } from "../../models";

export const getGetOauthOauthSessionsResponseMock = (): Sessions =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    currentSession: faker.datatype.boolean(),
    expiresAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.string.alpha(20),
    ip: faker.string.alpha(20),
    loggedInAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userAgent: faker.string.alpha(20),
  }));

export const getPostOauthOauthTokenMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.post("*/oauth/oauth/token", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostOauthOauthRefreshMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.post("*/oauth/oauth/refresh", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostOauthOauthLogoutMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.post("*/oauth/oauth/logout", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetOauthOauthValidateMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.get("*/oauth/oauth/validate", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetOauthOauthSessionsMockHandler = (
  overrideResponse?:
    | Sessions
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Sessions> | Sessions)
) => {
  return http.get("*/oauth/oauth/sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetOauthOauthSessionsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getDeleteOauthOauthSessionsMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete("*/oauth/oauth/sessions", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteOauthOauthSessionsSessionIdMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete("*/oauth/oauth/sessions/:sessionId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getOauthMock = () => [
  getPostOauthOauthTokenMockHandler(),
  getPostOauthOauthRefreshMockHandler(),
  getPostOauthOauthLogoutMockHandler(),
  getGetOauthOauthValidateMockHandler(),
  getGetOauthOauthSessionsMockHandler(),
  getDeleteOauthOauthSessionsMockHandler(),
  getDeleteOauthOauthSessionsSessionIdMockHandler(),
];
